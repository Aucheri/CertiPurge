@page "/add"
<style>
	.align-top { align-self: flex-start !important; }
	.ring-2.w-screen.flex.justify-center.items-center.max-w-sm { align-items: flex-start !important; }
</style>

@using CertiPurge.Data
@using OCR;
@using Tesseract
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject ApplicationDbContext DbContext

<PageTitle>Add Record</PageTitle>
<div class="flex justify-center items-center h-screen">
  <div class="box-content h-1/2 ring-2 w-screen max-w-sm p-6 bg-white border border-gray-200 rounded-lg shadow-md dark:bg-gray-800 dark:border-gray-700 ring-gray-300 flex flex-col justify-between items-center">
    <div class="block h-1/3 outline-dashed outline-blue-400 p-6 bg-white border border-gray-200 rounded-lg shadow-sm dark:border-gray-700">
      <InputFile class="" OnChange="@SingleUpload" />
	  <div class="justify-center pt-4 flex">
			<img src="/assets/Upload_Icon.svg" class="w-14 h-14 object-contain" />
		</div>
    </div>
	<p class=""></p>
  </div>
</div>


@if (IsProcessing)
{
	<div class="progress-modal">
		<div class="progress-content">
			<h2>Processing...</h2>
			<p>Please wait while we process your documents.</p>
			<div class="spinner-border text-primary" role="status">
				<span class="visually-hidden">Loading...</span>
			</div>
		</div>
	</div>
}


@code {
	public class FileData
	{
		public string Name { get; set; } = "";
		public string Data { get; set; } = "";
		public long Size { get; set; }
		public string Type { get; set; } = "";
	}

	public bool IsProcessing { get; set; } = false;

	public void Scan(string[] pages)
	{
		foreach (var page in pages)
		{
			string name = "";
			string course = "";
			string grade = "";
			string centrenum = "";
			string candidate = "";

			if (page.Split("\n")[0].Trim().Contains("AQA"))
			{
				AQAReader.ReadAQA(page, out name, out course, out grade, out centrenum, out candidate);
				Certificate cert = new Certificate
				{
					Name = name,
					Course = course,
					Grade = grade,
					CentreNumber = centrenum,
					CandidateNumber = candidate,
					ExamBoard = "AQA",
					ULN = "" // Set this to the appropriate value if available
				};

				DbContext.Certificates.Add(cert);
			}
			else if (page.Split("\n")[0].Trim().Contains("BTEC"))
			{
				Console.WriteLine("Detected BTEC format.");
				BTECReader.ReadBTEC(page, out name, out course, out grade, out centrenum, out candidate);
				Certificate cert = new Certificate
				{
					Name = name,
					Course = course,
					Grade = grade,
					CentreNumber = centrenum,
					CandidateNumber = candidate,
					ExamBoard = "BTEC",
					ULN = "" // Set this to the appropriate value if available
				};

				DbContext.Certificates.Add(cert);
			}
		}

		DbContext.SaveChanges();
	}

	public async Task SingleUpload(InputFileChangeEventArgs e)
	{
		IsProcessing = true;

		StateHasChanged();

		Console.WriteLine($"File selected: {e.File.Name}, {e.File.Size} bytes, {e.File.ContentType}");

		MemoryStream ms = new MemoryStream();
		await e.File.OpenReadStream().CopyToAsync(ms);
		var bytes = ms.ToArray();

		var pages = await Converter.ConvertPDFToText(bytes);

		Console.WriteLine($"Scanned {pages.Length} pages.");

		Scan(pages.ToArray());

		IsProcessing = false;

		StateHasChanged();
	}
}