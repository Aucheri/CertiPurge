@page "/add"

@using CertiPurge.Data
@using Microsoft.AspNetCore.Authorization
@using OCR;
@using Tesseract
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject ApplicationDbContext DbContext

@attribute [Authorize]

<PageTitle>Add Record</PageTitle>

<style>
	.align-top {
		align-self: flex-start !important;
	}

	.ring-2.w-screen.flex.justify-center.items-center.max-w-sm {
		align-items: flex-start !important;
	}
</style>

<div class="min-h-screen bg-gray-50 flex items-center justify-center p-4">
	<div class="w-full max-w-md">
		<div class="bg-white rounded-xl shadow-lg p-8">
			<div class="text-center mb-6">
				<h1 class="text-2xl font-bold text-gray-900 mb-2">Upload Certificate</h1>
				<p class="text-gray-600">Select a PDF file containing your certificates</p>
			</div>

			<div class="relative">
				<InputFile class="absolute inset-0 w-full h-full opacity-0 cursor-pointer z-10" OnChange="@SingleUpload"
					accept=".pdf" />

				<div
					class="border-2 border-dashed border-blue-300 rounded-lg p-8 text-center bg-blue-50 hover:bg-blue-100 transition-colors duration-200">
					<div class="flex flex-col items-center">
						<svg class="w-12 h-12 text-blue-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
								d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
						</svg>

						<h3 class="text-lg font-medium text-gray-900 mb-2">Drop your PDF here</h3>
						<p class="text-sm text-gray-500 mb-4">or click to browse files</p>

						<div
							class="inline-flex items-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 transition-colors">
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
									d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
							</svg>
							Choose PDF File
						</div>
					</div>

					<div class="mt-4 text-xs text-gray-400">
						Supported format: PDF files only
					</div>
				</div>
			</div>

			<div class="mt-6 text-center">
				<p class="text-sm text-gray-500">
					Please upload your certificates
				</p>
			</div>
		</div>
	</div>
</div>


@if (IsProcessing)
{
	<div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
		<div class="bg-white rounded-lg p-8 max-w-sm w-full mx-4 text-center">
			<div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
			<h2 class="text-xl font-semibold text-gray-900 mb-2">Processing PDF...</h2>
			<p class="text-gray-600">Please wait while we extract certificate data from your document.</p>
		</div>
	</div>
}

@if (FailedCount > 0)
{
	<span>Failed to read @FailedCount certificates.</span>
}


@code {
	public class FileData
	{
		public string Name { get; set; } = "";
		public string Data { get; set; } = "";
		public long Size { get; set; }
		public string Type { get; set; } = "";
	}

	public bool IsProcessing { get; set; } = false;

	public int FailedCount = 0;

	public void Scan(string[] pages)
	{
		FailedCount = 0;

		Console.WriteLine("Processing certificates");

		foreach (var page in pages)
		{
			string name = "";
			string course = "";
			string grade = "";
			string centrenum = "";
			string candidate = "";

			if (page.Contains("AQA"))
			{
				Readers.ReadAQA(page, out name, out course, out grade, out centrenum, out candidate);
				Certificate cert = new Certificate
				{
					Name = name,
					Course = course,
					Grade = grade,
					CentreNumber = centrenum,
					CandidateNumber = candidate,
					ExamBoard = "AQA",
					ULN = "" // Set this to the appropriate value if available
				};

				DbContext.Certificates.Add(cert);
			}
			else if (page.Split("\n")[0].Trim().Contains("BTEC"))
			{
				Console.WriteLine("Detected BTEC format.");
				Readers.ReadBTEC(page, out name, out course, out grade, out centrenum, out candidate);
				Certificate cert = new Certificate
				{
					Name = name,
					Course = course,
					Grade = grade,
					CentreNumber = centrenum,
					CandidateNumber = candidate,
					ExamBoard = "BTEC",
					ULN = "" // Set this to the appropriate value if available
				};

				DbContext.Certificates.Add(cert);
			}
			else if (page.Contains("eduqas"))
			{
				Console.WriteLine("Detected EDUQAS format.");
				Readers.ReadEDUQAS(page, out name, out course, out grade, out centrenum, out candidate);
				Certificate cert = new Certificate
				{
					Name = name,
					Course = course,
					Grade = grade,
					CentreNumber = centrenum,
					CandidateNumber = candidate,
					ExamBoard = "BTEC",
					ULN = "" // Set this to the appropriate value if available
				};

				DbContext.Certificates.Add(cert);
			}
			else if (page.Contains("OCR"))
			{

				Console.WriteLine("Detected OCR format.");
				Readers.ReadOCR(page, out name, out course, out grade, out centrenum, out candidate);
				Certificate cert = new Certificate
				{
					Name = name,
					Course = course,
					Grade = grade,
					CentreNumber = centrenum,
					CandidateNumber = candidate,
					ExamBoard = "BTEC",
					ULN = "" // Set this to the appropriate value if available
				};

				DbContext.Certificates.Add(cert);
			}
			else
			{
				FailedCount++;
			}
		}

		DbContext.SaveChanges();
	}

	public async Task SingleUpload(InputFileChangeEventArgs e)
	{
		// Validate file type
		if (!e.File.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
		{
			await JS.InvokeVoidAsync("alert", "Please select a PDF file only.");
			return;
		}

		// Validate file size (max 10MB)
		if (e.File.Size > 10 * 1024 * 1024)
		{
			await JS.InvokeVoidAsync("alert", "File size must be less than 10MB.");
			return;
		}

		IsProcessing = true;
		StateHasChanged();

		try
		{
			Console.WriteLine($"File selected: {e.File.Name}, {e.File.Size} bytes, {e.File.ContentType}");

			var fileSize = (int)e.File.Size;
			using var inStream = e.File.OpenReadStream(maxAllowedSize: e.File.Size);
			int offset = 0;
			while (offset < fileSize)
			{
				int read = await inStream.ReadAsync(bytes, offset, fileSize - offset);
				if (read == 0) break;
				offset += read;
			}
			Console.WriteLine("Here");
			MemoryStream ms = new MemoryStream();
			await e.File.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(ms);
			var bytes = ms.ToArray();

			var pages = await Converter.ConvertPDFToText(bytes);

			Console.WriteLine($"Scanned {pages.Length} pages.");

			Scan(pages.ToArray());

			await JS.InvokeVoidAsync("alert", $"Successfully processed {pages.Length} pages from your certificate.");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error processing file: {ex.Message}");
			await JS.InvokeVoidAsync("alert", "An error occurred while processing your file. Please try again.");
		}
		finally
		{
			IsProcessing = false;
			StateHasChanged();
		}
	}
}