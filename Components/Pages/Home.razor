@page "/"
@rendermode InteractiveServer
@using System
@using System.Collections.Generic
@using System.IO
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using CertiPurge.Data

@using OCR

@using Microsoft.AspNetCore.Authorization
@using OCR;

@using Tesseract
@inject IJSRuntime JS
@inject ApplicationDbContext DbContext

@attribute [Authorize]

<PageTitle>Home</PageTitle>

<div
	class="flex flex-col md:flex-row md:items-center md:justify-between gap-6 mt-6 mb-8 p-6 bg-white rounded-lg shadow">
	<div class="flex items-center w-full md:w-auto">
		<div class="relative w-full md:w-80">
			<InputText
				class="border border-gray-300 rounded-md px-4 py-2 pr-10 focus:outline-none focus:ring-2 focus:ring-red-500 w-full transition"
				@bind-Value="search" placeholder="Search certificates..." />
			<span class="absolute inset-y-0 right-3 flex items-center pointer-events-none text-gray-400">
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
					stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
						d="M21 21l-4.35-4.35m0 0A7.5 7.5 0 104.5 4.5a7.5 7.5 0 0012.15 12.15z" />
				</svg>
			</span>
		</div>
	</div>
	<div class="flex justify-end w-full md:w-auto">
		<button
			class="inline-flex items-center gap-2 text-white bg-red-700 hover:bg-red-800 focus:outline-none focus:ring-4 focus:ring-red-300 font-medium rounded-md text-sm px-5 py-2 transition shadow-sm"
			@onclick="() => ExportCSV()">
			<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24"
				stroke="currentColor">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
			</svg>
			Export certificates to Excel
		</button>
	</div>
</div>

<div class="pt-8" <table>
	<thead class="bg-red-700">
		<tr class="text-white">
			<th>Name</th>
			<th>Course</th>
			<th>Grade</th>
			<th>Centre Number</th>
			<th>Exam Board</th>
			<th>Candidate Number</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var cert in CertificatesData)
		{
			if (!string.IsNullOrEmpty(search) && (
			(cert.Name != null && cert.Name.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
			(cert.Course != null && cert.Course.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
			(cert.Grade != null && cert.Grade.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
			(cert.CentreNumber != null && cert.CentreNumber.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
			(cert.ExamBoard != null && cert.ExamBoard.Contains(search, StringComparison.OrdinalIgnoreCase)) ||
			(cert.CandidateNumber != null && cert.CandidateNumber.Contains(search, StringComparison.OrdinalIgnoreCase))
			))
			{
				<tr>
					<td>@cert.Name</td>
					<td>@cert.Course</td>
					<td>@cert.Grade</td>
					<td>@cert.CentreNumber</td>
					<td>@cert.ExamBoard</td>
					<td>@cert.CandidateNumber</td>
				</tr>
			}
			else if (string.IsNullOrEmpty(search))
			{
				<!-- Show all certificates if there's no search term -->
				<tr>
					<td>@cert.Name</td>
					<td>@cert.Course</td>
					<td>@cert.Grade</td>
					<td>@cert.CentreNumber</td>
					<td>@cert.ExamBoard</td>
					<td>@cert.CandidateNumber</td>
				</tr>
			}
		}
	</tbody>
	</table>
</div>

@code {

	public string? search { get; set; }
	public class FileData
	{
		public string Name { get; set; } = "";
		public string Data { get; set; } = "";
		public long Size { get; set; }
		public string Type { get; set; } = "";
	}

	public List<CertiPurge.Data.Certificate> CertificatesData = new();

	public bool IsProcessing { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		CertificatesData = DbContext.Certificates.ToList();
	}


	private static string EscapeCsv(string value)
	{
		if (string.IsNullOrEmpty(value))
			return "";

		// If value contains a comma, double-quote, or newline, wrap in quotes and escape internal quotes
		if (value.Contains(',') || value.Contains('"') || value.Contains('\n') || value.Contains('\r'))
		{
			value = "\"" + value.Replace("\"", "\"\"") + "\"";
		}

		return value;
	}

	private static string ToCsv(IEnumerable<Certificate> certs)
	{
		var sb = new System.Text.StringBuilder();

		// Header row
		sb.AppendLine("Name,Course,Grade,Centre Number,Exam Board,Candidate Number");

		// Data rows
		foreach (var cert in certs)
		{
			sb.AppendLine(string.Join(",",
			EscapeCsv(cert.Name),
			EscapeCsv(cert.Course),
			EscapeCsv(cert.Grade),
			EscapeCsv(cert.CentreNumber),
			EscapeCsv(cert.ExamBoard),
			EscapeCsv(cert.CandidateNumber)
			));
		}

		return sb.ToString();
	}

	public async Task ExportCSV()
	{
		// Convert data to CSV
		var csvContent = ToCsv(CertificatesData);

		// Convert to Base64 for download
		var bytes = System.Text.Encoding.UTF8.GetBytes(csvContent);
		var base64 = Convert.ToBase64String(bytes);

		// Call JavaScript to trigger download
		await JS.InvokeVoidAsync("downloadFileFromBase64", "certificates.csv", base64);
	}
}