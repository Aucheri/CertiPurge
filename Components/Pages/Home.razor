@page "/"
@using System
@using System.Collections.Generic
@using System.IO
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using CertiPurge.Data
@using OCR
@using Tesseract
@inject IJSRuntime JS
@inject ApplicationDbContext DbContext

<PageTitle>Home</PageTitle>

<button @onclick="ExportCSV">Export certificates to Excel</button>

<table>
    <thead>
        <tr>
            <th>Name</th>
            <th>Course</th>
            <th>Grade</th>
            <th>Centre Number</th>
            <th>Candidate Number</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var cert in CertificatesData)
        {
            <tr>
                <td>@cert.Name</td>
                <td>@cert.Course</td>
                <td>@cert.Grade</td>
                <td>@cert.CentreNumber</td>
                <td>@cert.CandidateNumber</td>
            </tr>
        }
    </tbody>
</table>

@code {
    public class FileData
    {
        public string Name { get; set; } = "";
        public string Data { get; set; } = "";
        public long Size { get; set; }
        public string Type { get; set; } = "";
    }

    public List<CertiPurge.Data.Certificate> CertificatesData = new();

    public bool IsProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        CertificatesData = DbContext.Certificates.ToList();
    }

    public void Scan(string[] pages)
    {
        foreach (var page in pages)
        {
            string name = "";
            string course = "";
            string grade = "";
            string centrenum = "";
            string candidate = "";

            if (page.Split("\n")[0].Trim().Contains("AQA"))
            {
                AQAReader.ReadAQA(page, out name, out course, out grade, out centrenum, out candidate);
                var cert = new Certificate
                {
                    Name = name,
                    Course = course,
                    Grade = grade,
                    CentreNumber = centrenum,
                    CandidateNumber = candidate,
                    ExamBoard = "AQA",
                    ULN = ""
                };

                DbContext.Certificates.Add(cert);
                CertificatesData.Add(cert);
            }
            else if (page.Split("\n")[0].Trim().Contains("BTEC"))
            {
                Console.WriteLine("Detected BTEC format.");
                BTECReader.ReadBTEC(page, out name, out course, out grade, out centrenum, out candidate);
                var cert = new Certificate
                {
                    Name = name,
                    Course = course,
                    Grade = grade,
                    CentreNumber = centrenum,
                    CandidateNumber = candidate,
                    ExamBoard = "BTEC",
                    ULN = ""
                };

                DbContext.Certificates.Add(cert);
                CertificatesData.Add(cert);
            }
        }

        DbContext.SaveChanges();
    }

    public async Task SingleUpload(InputFileChangeEventArgs e)
    {
        IsProcessing = true;
        StateHasChanged();

        Console.WriteLine($"File selected: {e.File.Name}, {e.File.Size} bytes, {e.File.ContentType}");

        using var ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();

        var pages = await Converter.ConvertPDFToText(bytes);
        Console.WriteLine($"Scanned {pages.Length} pages.");

        Scan(pages.ToArray());

        IsProcessing = false;
        StateHasChanged();
    }

    private static string EscapeCsv(string value)
    {
        if (string.IsNullOrEmpty(value))
        {
            return "";
        }

        bool mustQuote = value.Contains(',') || value.Contains('"') || value.Contains('\n') || value.Contains('\r');

        if (mustQuote)
        {
            return "\"" + value.Replace("\"", "\"\"") + "\"";
        }

        return value;
    }

    private static string ToCsv(IEnumerable<Certificate> certs)
    {
        var sb = new System.Text.StringBuilder();
        sb.AppendLine("Name,Course,Grade,Centre Number,Candidate Number,Exam Board,ULN");

        foreach (var c in certs)
        {
            sb.AppendLine(
                EscapeCsv(c.Name) + "," +
                EscapeCsv(c.Course) + "," +
                EscapeCsv(c.Grade) + "," +
                EscapeCsv(c.CentreNumber) + "," +
                EscapeCsv(c.CandidateNumber) + "," +
                EscapeCsv(c.ExamBoard) + "," +
                EscapeCsv(c.ULN)
            );
        }

        return sb.ToString();
    }

    public async Task ExportCSV() //chatgpt and copilot wrote all of this stuff bro
    {
        // Also log to browser console so you can see these messages in DevTools
        await JS.InvokeVoidAsync("console.log", "ExportCSV() called (browser)");
        Console.WriteLine("ExportCSV() called!");

        string csv = ToCsv(CertificatesData);
        await JS.InvokeVoidAsync("console.log", $"CSV built: {csv.Length} characters (browser)");
        Console.WriteLine($"CSV built: {csv.Length} characters");

        var bytes = System.Text.Encoding.UTF8.GetBytes(csv);
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("console.log", "Base64 conversion done (browser)");
        Console.WriteLine("Base64 conversion done.");

        try
        {
            // quick check what the JS runtime thinks the function type is
            var fnType = await JS.InvokeAsync<string>("eval", "typeof window.downloadFileFromBase64");
            await JS.InvokeVoidAsync("console.log", $"downloadFileFromBase64 type: {fnType}");

            await JS.InvokeVoidAsync("downloadFileFromBase64", "certificates.csv", base64);
            await JS.InvokeVoidAsync("console.log", "JS invoked successfully (browser)");
            Console.WriteLine("JS invoked successfully!");
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "Error invoking JS: " + ex.Message);
            Console.WriteLine("Error invoking JS: " + ex.Message);
        }
    }
}